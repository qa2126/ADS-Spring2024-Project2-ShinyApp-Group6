n=1000
arima.sim(list(ma = c(1,-1.3,0.4)), n, sd = sqrt(0.2))
n=1000
x = arima.sim(list(ma = c(1,-1.3,0.4)), n, sd = sqrt(0.2))
plot(x)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tseries)
library(zoo)
plot(x)
acf(x)
ARMAacf(ma = c(1,-1.3,0.4))
n=1000
x = arima.sim(n, list(ma =0.25), sd = sqrt(0.9))
n=1000
x = arima.sim(n = 1000, list(ma =0.25), sd = sqrt(0.9))
plot(x)
x = arima.sim(list(ma =0.25), n=1000, sd = sqrt(0.9))
plot(x)
x = arima.sim(list(ma = c(1,-1.3,0.4)), n=1000, sd = sqrt(0.2))
plot(x)
acf(x)
x = arima.sim(list(ma =0.25), n=1000, sd = sqrt(0.9))
plot(x)
acf(x)
x = arima.sim(list(ma = c(-1.3,0.4)), n=1000, sd = sqrt(0.2))
plot(x)
acf(x)
x2 = arima.sim(list(ma =0.25), n=1000, sd = sqrt(0.9))
plot(x2)
acf(x2)
x2 = arima.sim(list(ma =0.25), n=1000, sd = sqrt(0.9))
plot(x2)
acf(x2)
x2b = arima.sim(list(ma = 4), n=1000, sd = sqrt(0.9))
plot(x2b)
acf(x2b)
x1 = arima.sim(list(ma = c(-1.3,0.4)), n=1000, sd = sqrt(0.1))
plot(x1)
acf(x1)
ARMAacf(ma = c(-1.3,0.4))
x2 = arima.sim(list(ma =0.25), n=1000, sd = sqrt(0.4))
plot(x2)
acf(x2)
x2b = arima.sim(list(ma = 4), n=1000, sd = sqrt(0.4))
plot(x2b)
acf(x2b)
x3 = arima.sim(list(ar = -0.25), n=1000, sd = sqrt(0.1))
plot(x3)
acf(x3)
x4 = arima.sim(list(ar = -0.5), n=1000, sd = sqrt(0.1))
plot(x4)
x4 = arima.sim(list(ar = -0.5), n=1000, sd = sqrt(0.1))
acf(x4)
x4 = arima.sim(list(ar = -0.3), n=1000, sd = sqrt(0.1))
acf(x4)
x5 = arima.sim(list(ar = -0.4), n=1000, sd = sqrt(0.1))
acf(x5)
x4 = arima.sim(list(ar = -0.3), n=1000, sd = sqrt(0.1))
acf(x4)
x5 = arima.sim(list(ar = -0.5), n=1000, sd = sqrt(0.1))
acf(x5)
x4 = arima.sim(list(ar = -0.3), n=1000, sd = sqrt(0.1))
acf(x4)
x5 = arima.sim(list(ar = -0.45), n=1000, sd = sqrt(0.1))
acf(x5)
x3 = arima.sim(list(ar = -0.5), n=1000, sd = sqrt(0.1))
plot(x3)
acf(x3)
x4 = arima.sim(list(ar = -0.7), n=1000, sd = sqrt(0.1))
acf(x4)
x5 = arima.sim(list(ar = -0.9), n=1000, sd = sqrt(0.1))
acf(x5)
x4 = arima.sim(list(ar = -0.1), n=1000, sd = sqrt(0.1))
acf(x4)
x5 = arima.sim(list(ar = 0.1), n=1000, sd = sqrt(0.1))
acf(x5)
x4 = arima.sim(list(ar = -0.1), n=1000, sd = sqrt(0.1))
acf(x4)
x5 = arima.sim(list(ar = 0.2), n=1000, sd = sqrt(0.1))
acf(x5)
x4 = arima.sim(list(ar = -0.7), n=1000, sd = sqrt(0.1))
acf(x4)
x5 = arima.sim(list(ar = -0.9), n=1000, sd = sqrt(0.1))
acf(x5)
x3d = arima.sim(list(ar = 0.5), n=1000, sd = sqrt(0.1))
acf(x3d)
var=0.6^2
beta=c(-0.7,-0.2,0.2)
var=0.6^2
beta=c(-0.7,-0.2,0.2)
#a
sum(c(1,beta)^2)*var
#b
var*(1*beta[1]+beta[1]*beta[2]+beta[2]*beta[3])
#c
(1*beta[2]+beta[1]*beta[3])/sum(c(1,beta)^2)
var=1.1^2
alpha=0.5
#a
var/(1-alpha^2)
#b yes
#c
alpha*var/(1-alpha^2)
alpha=c(1.24,-0.58)
#a
a=-alpha[2]
b=-alpha[1]
c=1
stationary_or_not=function(a,b,c){
if(b^2-4*a*c > 0){
result=ifelse(abs((-b+sqrt(b^2-4*a*c))/2/a)>1 & abs((-b-sqrt(b^2-4*a*c))/2/a)>1,
paste("stationary"),paste("not stationary"))
}else{
result=ifelse(((-b^2+4*a*c)/2/a)^2+(b/2/a)^2 > 1,paste("stationary"),paste("not stationary"))
}
return(result)
}
stationary_or_not(a,b,c)
rho1=alpha[1]/(1-alpha[2])
rho2=alpha[1]*rho1+alpha[2]
rho2
points(ywe(1:15), col="red")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(tseries)
library(zoo)
set.seed(23456)
x <- arima.sim(n=1500, list(ar=c(0.8, -1/3, 0.6/sqrt(3))), sd = sqrt(0.8))
plot(x)
acf(x)
pacf(x)
arima(x, order = c(3,0,0), include.mean=F)
)
arima(x, order = c(3,0,0),  method=c("CSS-ML"), include.mean=F)
arima(x, order = c(3,0,0),  method=c("CSS-ML"), include.mean=F)
arima(x, order = c(3,0,0),  method=c("ML"), include.mean=F)
arima(x, order = c(3,0,0),  method=c("CSS"), include.mean=F)
set.seed(23456)
x <- arima.sim(n=1500, list(ar=c(0.8, -1/3, 0.6/sqrt(3))), sd = 0.8)
plot(x)
set.seed(23456)
x <- arima.sim(n=1500, list(ar=c(0.8, -1/3, 0.6/sqrt(3))), sd = 0.8)
plot(x)
acf(x)
pacf(x)
css_ml = arima(x, order = c(3,0,0),  method=c("CSS-ML"), include.mean=F)
ml = arima(x, order = c(3,0,0),  method=c("ML"), include.mean=F)
css = arima(x, order = c(3,0,0),  method=c("CSS"), include.mean=F)
css_ml = arima(x, order = c(3,0,0),  method=c("CSS-ML"), include.mean=F)
ml = arima(x, order = c(3,0,0),  method=c("ML"), include.mean=F)
css = arima(x, order = c(3,0,0),  method=c("CSS"), include.mean=F)
print = c(0.8, -1/3, 0.6/sqrt(3), 0.64,
css_ml$coef, ccs_ml$sigma2,
ml$coef, ml$sigma2,
css$coef, css$sigma2)
css_ml = arima(x, order = c(3,0,0),  method=c("CSS-ML"), include.mean=F)
ml = arima(x, order = c(3,0,0),  method=c("ML"), include.mean=F)
css = arima(x, order = c(3,0,0),  method=c("CSS"), include.mean=F)
print = c(0.8, -1/3, 0.6/sqrt(3), 0.64,
css_ml$coef, css_ml$sigma2,
ml$coef, ml$sigma2,
css$coef, css$sigma2)
dat = matrix(print, nrow = 4, ncol = 4, byrow = TRUE)
y = as.data.frame(dat)
rownames(y) = c("True values", "CSS-ML", "ML", "CSS")
colnames(y) = c("a1", "a2", "a3", "sigma^2")
kable(y, digits = 3)
css_ml = arima(x, order = c(3,0,0),  method=c("CSS-ML"), include.mean=F)
ml = arima(x, order = c(3,0,0),  method=c("ML"), include.mean=F)
css = arima(x, order = c(3,0,0),  method=c("CSS"), include.mean=F)
y = c(0.8, -1/3, 0.6/sqrt(3), 0.64,
css_ml$coef, css_ml$sigma2,
ml$coef, ml$sigma2,
css$coef, css$sigma2)
dat = matrix(y, nrow = 4, ncol = 4, byrow = TRUE)
result = as.data.frame(dat)
rownames(result) = c("True values", "CSS-ML", "ML", "CSS")
colnames(result) = c("a1", "a2", "a3", "sigma^2")
kable(result, digits = 3)
kable(result, digits = 3)
#d
a*gamma1/varx
#1
var=7^2
a=0.5
b=0.8
#a
a*var+b*var
#b
varx=(a*b*var+var+b*(a+b)*var)/(1-a^2)
varx
#c
gamma1=a*varx+b*varx
gamma1
#d
a*gamma1/varx
#c
gamma1=a*varx+b*var
gamma1
#d
a*gamma1/varx
a=0.575
high_or_low=function(a){
ifelse(a>0, return(paste("high")), return(paste('low')))
}
high_or_low(a)
high_or_low=function(a){
ifelse((1+a)/(1-a)/200>1/100, return(paste("high")), return(paste('low')))
}
high_or_low(a)
a=-0.484
high_or_low=function(a){
ifelse(a>0, return(paste("high")), return(paste('low')))
}
high_or_low(a)
#if you do not have the package, type install.packages("name_of_the_package")
library(knitr)
set.seed(443)
w <- seq(0, 3, by = 0.1)
fofw <- c(rep(1,length(w))) * 4/pi
plot(w, fofw)
knitr::opts_chunk$set(echo = TRUE)
#if you do not have the package, type install.packages("name_of_the_package")
library(knitr)
library(tseries)
set.seed(443)
w <- seq(0, 3, by = 0.1)
fofw <- c(rep(1,length(w))) * 4/pi
plot(w, fofw)
plot(w, fofw, type = "l")
set.seed(443)
w <- seq(0, 3, by = 0.1)
fofw <- c(rep(1,length(w))) * 4/pi
plot(w, fofw, type = "l")
set.seed(443)
w <- seq(0, 3, by = 0.1)
fw <- c(rep(1,length(w))) * 4/pi
plot(w, fw, type = "l")
WN100 <- arima.sim(model=list(), n=100, sd=2)
spec.pgram(WN100, log="no")
WN1000 <- arima.sim(model=list(), n=1000, sd=2)
spec.pgram(WN1000, log="no")
WN100 <- arima.sim(model=list(), n=100, sd=1)
WN100 <- arima.sim(model=list(), n=100, sd=1)
spec.pgram(WN100, log="no")
set.seed(443)
w <- seq(0, 3, by = 0.1)
fw <- c(rep(1,length(w))) * 4/pi
plot(w, fw, type = "l")
WN100 <- arima.sim(model=list(), n=100, sd=1)
spec.pgram(WN100, log="no")
WN1000 <- arima.sim(model=list(), n=1000, sd=1)
spec.pgram(WN1000, log="no")
plt.spec.ma <- function(w){
fw <- (1+0.9^2)*2^2/pi *(1+(2*(-0.9)*cos(w)/(1+0.9^2)))
plot(w, fw, type="l")
}
plt.spec.ma(w)
XT100 <- arima.sim(model=list(ma=c(-0.9)), n=100, sd=2)
spec.pgram(XT100, log="no")
XT1000 <- arima.sim(model=list(ma=c(-0.9)), n=1000, sd=2)
spec.pgram(XT1000, log="no")
set.seed(443)
w <- seq(0, 4, by = 0.1)
fw <- c(rep(1,length(w))) * 4/pi
plot(w, fw, type = "l")
plt.spec.ma <- function(w){
fw <- (1+0.9^2)*2^2/pi *(1+(2*(0.9)*cos(w)/(1+0.9^2)))
plot(w, fw, type="l")
}
plt.spec.ma(w)
XT100 <- arima.sim(n=100, list(ma=c(0.9)), sd=2)
spec.pgram(XT100, log="no")
plt.spec.ma <- function(w){
fw <- (1-0.9^2)*2^2/pi *(1+(2*(0.9)*cos(w)/(1-0.9^2)))
plot(w, fw, type="l")
}
plt.spec.ma(w)
plt.spec.ma <- function(w){
fw <- (1-0.9^2)*2^2/pi *(1+(2*(0.9)*cos(w)/(1-0.9^2)))
plot(w, fw, type="l")
}
plt.spec.ma(w)
XT100 <- arima.sim(n=100, list(ma=c(0.9)), sd=2)
spec.pgram(XT100, log="no")
XT100 <- arima.sim(list(ma=c(0.9)), n=100, sd=2)
spec.pgram(XT100, log="no")
WN100 <- arima.sim(list(), n=100, sd=1)
spec.pgram(WN100, log="no")
WN1000 <- arima.sim(list(), n=1000, sd=1)
spec.pgram(WN1000, log="no")
plt.spec.ma <- function(w){
fw <- (1-0.9^2)*2^2/pi *(1+(2*(0.9)*cos(w)/(1-0.9^2)))
plot(w, fw, type="l")
}
plt.spec.ma(w)
XT100 <- arima.sim(model=list(ma=c(0.9)), n=100, sd=2)
spec.pgram(XT100, log="no")
XT100 <- arima.sim(model=list(ma=c(0.9)), n=100, sd=2)
spec.pgram(XT100, log="no")
XT100 <- arima.sim(model=list(ma=c(0.9)), n=100, sd=2)
spec.pgram(XT100, log="no")
XT100 <- arima.sim(list(ma=c(0.9)), n=100, sd=2)
spec.pgram(XT100, log="no")
XT1000 <- arima.sim(list(ma=c(0.9)), n=1000, sd=2)
spec.pgram(XT1000, log="no")
plt.spec.ar <- function(w){
fw <- 2^2/(pi *(1+1.6*cos(w)+0.8^2))
plot(w, fw, type="l")
}
plt.spec.ar(w)
plt.spec.ma <- function(w){
fw <- (1+0.9^2)*1/pi *(1+(2*(0.9)*cos(w)/(1+0.9^2)))
plot(w, fw, type="l")
}
plt.spec.ma(w)
XT100 <- arima.sim(list(ma=c(0.9)), n=100, sd=2)
spec.pgram(XT100, log="no")
XT1000 <- arima.sim(list(ma=c(0.9)), n=1000, sd=2)
spec.pgram(XT1000, log="no")
plt.spec.ar <- function(w){
fw <- 1/(pi *(1+1.6*cos(w)+0.8^2))
plot(w, fw, type="l")
}
plt.spec.ar(w)
set.seed(443)
w <- seq(0, 3, by = 0.1)
fw <- c(rep(1,length(w))) * 1/pi
plot(w, fw, type = "l")
set.seed(443)
w <- seq(0, 3, by = 0.1)
fw <- c(rep(1,length(w))) * 1/pi
plot(w, fw, type = "l")
WN100 <- arima.sim(model=list(), n=100, sd=1)
spec.pgram(WN100, log="no")
WN1000 <- arima.sim(model=list(), n=1000, sd=1)
spec.pgram(WN1000, log="no")
plt.spec.ma <- function(w){
fw <- (1+0.9^2)*1/pi *(1+(2*(0.9)*cos(w)/(1+0.9^2)))
plot(w, fw, type="l")
}
plt.spec.ma(w)
XT100 <- arima.sim(list(ma=c(0.9)), n=100, sd=1)
spec.pgram(XT100, log="no")
XT1000 <- arima.sim(list(ma=c(0.9)), n=1000, sd=1)
spec.pgram(XT1000, log="no")
XT100 <- arima.sim(list(ar=c(0.8)), n=100, sd=1)
spec.pgram(XT100, log="no")
XT1000 <- arima.sim(list(ar=c(0.8)), n=1000, sd=1)
spec.pgram(XT1000, log="no")
plt.spec.ar <- function(w){
fw <- 1/(pi *(1+1.6*cos(w)+0.8^2))
plot(w, fw, type="l")
}
plt.spec.ar(w)
plt.spec.ar <- function(w){
fw <- 1/(pi *(1+1.6*cos(w)+0.8^2))
plot(w, fw, type="l")
}
plt.spec.ar(w)
XT100 <- arima.sim(list(ar=c(-0.8)), n=100, sd=1)
spec.pgram(XT100, log="no")
XT1000 <- arima.sim(list(ar=c(-0.8)), n=1000, sd=1)
spec.pgram(XT1000, log="no")
XT100 <- arima.sim(list(ar=c(-0.8)), n=100, sd=1)
spec.pgram(XT100, log="no")
a=-0.62
lag=4
-0.62^lag/sqrt(1/(1-a^2))
sigma2=7.9^2
a=0.31
b=0.76
b*sigma2
varxt=sigma2*(1+a^2)
varyt=sigma2*(1+b^2)
a*sigma2/sqrt(varxt*varyt)
7.9^2
7.9^2*0.31*0.76*7.9^2
7.9^2*0.31*0.76
0.31*0.76
7.9^2
7.9^2*0.31
7.9^2*0.76
7.9^2+0.31*0.76*7.9^2
r0 = 7.9^2+0.31*0.76*7.9^2
r0
r0 = 7.9^2+0.31*0.76*7.9^2
varxt= 7.9^2 + 0.31^2*7.9^2
varyt= 7.9^2 + 0.76^2*7.9^2
p0=r0/sqrt(varxt*varyt)
p0
knitr::opts_chunk$set(echo = TRUE)
vector1 <- c(3.1, 4.1, 5.1, 6.1, 7.1, 8.1)
knitr::opts_chunk$set(echo = TRUE)
vector1 <- c(3.1, 4.1, 5.1, 6.1, 7.1, 8.1)
vector1
print(vector1)
vector2 <- seq(from = 3.1, to = 8.1, by = 1)
print(vector2)
vector3 <- seq(from = 3.1, to = 8.1, length.out = 5)
print(vector3)
vector3 <- seq(from = 3.1, to = 8.1, length.out = 6)
print(vector3)
vector1 <- append(vector1, 10, after = 0)
print(vector1)
vector1 <- append(vector1, 20, after = 1)
print(vector1)
vector1 <- append(vector1, 20, after = 2)
print(vector1)
vector1 <- append(vector1, 10, after = 0)
print(vector1)
vector1 <- c(3.1, 4.1, 5.1, 6.1, 7.1, 8.1)
print(vector1)
vector1 <- append(vector1, 10, after = 0)
print(vector1)
vector1 <- append(vector1, 20, after = 2)
print(vector1)
vector1 <- append(vector1, 30, after = 5)
print(vector1)
vector4 <-  c(2, 3, 6, 10, 15, 18, 22, 25, 27, 30, 31, 35, 42)
vector4 <-  c(2, 3, 6, 10, 15, 18, 22, 25, 27, 30, 31, 35, 42)
print(vector4)
vector5 <- vector4[(vector4 > 5) & (vector4/3)]
print(vector5)
vector5 <- vector4[(vector4 > 5) & (vector4%%3)]
print(vector5)
vector5 <- vector4[(vector4 > 5) & if(vector4%%3==0)]
vector5 <- vector4[(vector4 > 5) & (vector4%%3==0)]
print(vector5)
print(27 %in% vector5)
list1 <- list(c(1,50,88), c(“yesterday”, “today”, “tomorrow”), 22.5, c(33.8, 42), "class_0001")
list1 <- list(c(1,50,88), c("yesterday", "today", "tomorrow"), 22.5, c(33.8, 42), "class_0001")
print(list1)
unlist(list1)
x -> (2, 4, 3, 2, 4, 5)
y -> (20, 60, 46, 27, 61, 77)
source("~/.active-rstudio-document", echo=TRUE)
x = (2, 4, 3, 2, 4, 5)
y = (20, 60, 46, 27, 61, 77)
x = c(2, 4, 3, 2, 4, 5)
y = c(20, 60, 46, 27, 61, 77)
reg -> lm(y~x)
reg = lm(y~x)
summary(reg)
plot(reg)
reg = lm(y~x)
summary(reg)
plot(x,y)
plot(x,y)
abline(lm(y ~ x))
x1 <- c(2, 4, 3, 2, 4, 5)
y1 <- c(20, 60, 46, 27, 61, 77)
reg2 <- lm(y1~x1)
summary(reg2)
plot(x1,y1)
abline(lm(y1 ~ x1))
x2 <- c(1, 0, 2, 0, 3, 1, 0, 1, 2, 0)
y2 <- c(16, 9, 17, 12, 22, 13, 8, 15, 19, 11)
reg3 <- lm(y2~x2)
summary(reg3)
plot(x2,y2)
abline(lm(y2 ~ x2))
x2 <- c(1, 0, 2, 0, 3, 1, 0, 1, 2, 0)
y2 <- c(16, 9, 17, 12, 22, 13, 8, 15, 19, 11)
reg2 <- lm(y2~x2)
summary(reg2)
plot(x2,y2)
abline(lm(y2 ~ x2))
summary(reg1)
x1 <- c(2, 4, 3, 2, 4, 5)
y1 <- c(20, 60, 46, 27, 61, 77)
reg1 <- lm(y1~x1)
summary(reg1)
plot(x1,y1)
abline(lm(y1 ~ x1))
x2 <- c(1, 0, 2, 0, 3, 1, 0, 1, 2, 0)
y2 <- c(16, 9, 17, 12, 22, 13, 8, 15, 19, 11)
reg2 <- lm(y2~x2)
summary(reg2)
plot(x2,y2)
abline(lm(y2 ~ x2))
mean(x2)
mean(y2)
x1 <- c(2, 4, 3, 2, 4, 5)
y1 <- c(20, 60, 46, 27, 61, 77)
reg1 <- lm(y1~x1)
summary(reg1)
plot(x1,y1)
abline(lm(y1 ~ x1))
x2 <- c(1, 0, 2, 0, 3, 1, 0, 1, 2, 0)
y2 <- c(16, 9, 17, 12, 22, 13, 8, 15, 19, 11)
reg2 <- lm(y2~x2)
summary(reg2)
plot(x2,y2)
abline(lm(y2 ~ x2))
plot(x,y) + points(xbar, ybar, col='red') + abline(lm(y2 ~ x2))
xbar <- mean(x)
ybar <- mean(y)
plot(x,y) + points(xbar, ybar, col='red') + abline(lm(y2 ~ x2))
xbar <- mean(x2)
ybar <- mean(y2)
plot(x2,y2) + points(xbar, ybar, col='red') + abline(lm(y2 ~ x2))
setwd("~/Documents/GitHub/5243/ADS-Spring2024-Project2-ShinyApp-Group6/data")
shiny::runApp('~/Documents/GitHub/5243/ADS-Spring2024-Project2-ShinyApp-Group6/app')
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
install.packages("leaflet")
